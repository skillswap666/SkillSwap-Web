plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'club.skillswap'
version = '0.0.1-SNAPSHOT'
description = 'skill swap project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
  // DB & migration
	implementation 'org.postgresql:postgresql:42.7.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
  // Lombok
	compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
  // OAuth2 Resource Server
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.security:spring-security-oauth2-jose'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  implementation 'org.apache.commons:commons-lang3:3.12.0'
}

def loadDotEnv() {
  def map = [:]
  def envFile = file('.env')
  if (!envFile.exists()) return map
  envFile.eachLine { raw ->
    def line = raw.trim()
    if (!line || line.startsWith('#')) return
    if (line.startsWith('export ')) line = line.substring(7).trim()
    def i = line.indexOf('=')
    if (i <= 0) return
    def k = line.substring(0, i).trim()
    def v = line.substring(i + 1).trim()
    if ((v.startsWith('"') && v.endsWith('"')) || (v.startsWith("'") && v.endsWith("'"))) {
      v = v.substring(1, v.length()-1)
    }
    if (k.startsWith('\uFEFF')) k = k.substring(1)
    map[k] = v
  }
  map
}


// 让 bootRun 自动把 .env 注入（环境变量 + System Properties）
tasks.named('bootRun') {
  def envMap = loadDotEnv()
  environment envMap
  // 同步设置到 JVM System Properties，避免某些环境变量不可见的问题
  envMap.each { k, v -> systemProperty k, v }

  doFirst {
    println "[bootRun] Loaded .env keys: ${envMap.keySet()}" // 不打印值
	println "DB_PASSWORD preview: ${envMap['DB_PASSWORD']}***"
	println "JWT_HS256_SECRET preview: ${envMap['JWT_HS256_SECRET']}***"

  }

  // 如果你之前加了 JVM 参数，这里也可以顺便一起带上：
  jvmArgs = ['-Djava.net.preferIPv4Stack=true']
}

tasks.named('test') {
  useJUnitPlatform()
  def envMap = loadDotEnv()
  environment envMap
  envMap.each { k, v -> systemProperty k, v }
}